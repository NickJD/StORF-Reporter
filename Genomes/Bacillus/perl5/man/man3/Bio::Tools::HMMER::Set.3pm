.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::HMMER::Set 3pm"
.TH Bio::Tools::HMMER::Set 3pm "2018-09-25" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::HMMER::Set \- Set of identical domains from HMMER matches
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # get a Set object probably from the results object
\&    print "Bits score over set ",$set\->bits," evalue ",$set\->evalue,"\en";
\&
\&    foreach $domain ( $set\->each_Domain ) {
\&        print "Domain start ",$domain\->start," end ",$domain\->end,"\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Represents a set of \s-1HMMER\s0 domains hitting one sequence. \s-1HMMER\s0 reports two
different scores, a per sequence total score (and evalue) and a per
domain score and evalue. This object represents a collection of the same
domain with the sequence bits score and evalue. (these attributes are also
on the per domain scores, which you can get there).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.Bug reports can be submitted via the
web:
.PP
.Vb 1
\& https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney\-at\-ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "add_Domain"
.IX Subsection "add_Domain"
.Vb 5
\& Title   : add_Domain
\& Usage   : $set\->add_Domain($domain)
\& Function: adds the domain to the list
\& Returns : nothing
\& Args    : A Bio::Tools::HMMER::Domain object
.Ve
.SS "each_Domain"
.IX Subsection "each_Domain"
.Vb 5
\& Title   : each_Domain
\& Usage   : foreach $domain ( $set\->each_Domain() )
\& Function: returns an array of domain objects in this set
\& Returns : array
\& Args    : none
.Ve
.SS "name"
.IX Subsection "name"
.Vb 6
\& Title   : name
\& Usage   : $obj\->name($newval)
\& Function:
\& Example :
\& Returns : value of name
\& Args    : newvalue (optional)
.Ve
.SS "desc"
.IX Subsection "desc"
.Vb 6
\& Title   : desc
\& Usage   : $obj\->desc($newval)
\& Function:
\& Example :
\& Returns : value of desc
\& Args    : newvalue (optional)
.Ve
.SS "accession"
.IX Subsection "accession"
.Vb 6
\& Title   : accession
\& Usage   : $obj\->accession($newval)
\& Function:
\& Example :
\& Returns : value of accession
\& Args    : newvalue (optional)
.Ve
.SS "bits"
.IX Subsection "bits"
.Vb 6
\& Title   : bits
\& Usage   : $obj\->bits($newval)
\& Function:
\& Example :
\& Returns : value of bits
\& Args    : newvalue (optional)
.Ve
.SS "evalue"
.IX Subsection "evalue"
.Vb 6
\& Title   : evalue
\& Usage   : $obj\->evalue($newval)
\& Function:
\& Example :
\& Returns : value of evalue
\& Args    : newvalue (optional)
.Ve
