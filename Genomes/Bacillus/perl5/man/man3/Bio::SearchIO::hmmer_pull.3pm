.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SearchIO::hmmer_pull 3pm"
.TH Bio::SearchIO::hmmer_pull 3pm "2018-09-25" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SearchIO::hmmer_pull \- A parser for HMMER output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    # do not use this class directly it is available through Bio::SearchIO
\&    use Bio::SearchIO;
\&    my $in = Bio::SearchIO\->new(\-format => \*(Aqhmmer_pull\*(Aq,
\&                               \-file   => \*(Aqt/data/hmmpfam.bigout\*(Aq);
\&    while (my $result = $in\->next_result) {
\&        # this is a Bio::Search::Result::HmmpfamResult object
\&        print $result\->query_name(), " for HMM ", $result\->hmm_name(), "\en";
\&        while (my $hit = $result\->next_hit) {
\&            print $hit\->name(), "\en";
\&            while (my $hsp = $hit\->next_hsp) {
\&                print "length is ", $hsp\->length(), "\en";
\&            }
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object implements a pull-parser for \s-1HMMER\s0 output. It is fast since it
only does work on request (hence 'pull').
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 12
\& Title   : new
\& Usage   : my $obj = Bio::SearchIO::hmmer_pull\->new();
\& Function: Builds a new Bio::SearchIO::hmmer_pull object 
\& Returns : Bio::SearchIO::hmmer_pull
\& Args    : \-fh/\-file => HMMER output filename
\&           \-format   => \*(Aqhmmer_pull\*(Aq
\&           \-evalue   => float or scientific notation number to be used
\&                        as an evalue cutoff for hits
\&           \-score    => integer or scientific notation number to be used
\&                        as a score value cutoff for hits
\&           \-hsps     => integer minimum number of hsps (domains) a hit must have
\&           \-piped_behaviour => \*(Aqtemp_file\*(Aq|\*(Aqmemory\*(Aq|\*(Aqsequential_read\*(Aq
\&
\&           \-piped_behaviour defines what the parser should do if the input is
\&            an unseekable filehandle (eg. piped input), see
\&            Bio::PullParserI::chunk for details. Default is \*(Aqsequential_read\*(Aq.
.Ve
.SS "next_result"
.IX Subsection "next_result"
.Vb 5
\& Title   : next_result
\& Usage   : my $hit = $searchio\->next_result;
\& Function: Returns the next Result from a search
\& Returns : Bio::Search::Result::ResultI object
\& Args    : none
.Ve
.SS "result_count"
.IX Subsection "result_count"
.Vb 5
\& Title   : result_count
\& Usage   : my $count = $searchio\->result_count
\& Function: Returns the number of results we have processed.
\& Returns : integer
\& Args    : none
.Ve
.SS "rewind"
.IX Subsection "rewind"
.Vb 4
\& Title   : rewind
\& Usage   : $searchio\->rewind;
\& Function: Allow one to reset the Result iterator to the beginning, so that
\&           next_result() will subsequently return the first result and so on.
\&
\&           NB: result objects are not cached, so you will get new result objects
\&           each time you rewind. Also, note that result_count() counts the
\&           number of times you have called next_result(), so will not be able
\&           tell you how many results there were in the file if you use rewind().
\&
\& Returns : n/a
\& Args    : none
.Ve
