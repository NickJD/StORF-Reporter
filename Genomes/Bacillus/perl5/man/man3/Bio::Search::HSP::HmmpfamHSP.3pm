.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::HSP::HmmpfamHSP 3pm"
.TH Bio::Search::HSP::HmmpfamHSP 3pm "2018-09-25" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::HSP::HmmpfamHSP \- A parser and HSP object for hmmpfam hsps
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # generally we use Bio::SearchIO to build these objects
\&    use Bio::SearchIO;
\&    my $in = Bio::SearchIO\->new(\-format => \*(Aqhmmer_pull\*(Aq,
\&                                                           \-file   => \*(Aqresult.hmmer\*(Aq);
\&
\&    while (my $result = $in\->next_result) {
\&                while (my $hit = $result\->next_hit) {
\&                        print $hit\->name, "\en";
\&                        print $hit\->score, "\en";
\&                        print $hit\->significance, "\en";
\&
\&                        while (my $hsp = $hit\->next_hsp) {
\&                                # process HSPI objects
\&                        }
\&                }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object implements a parser for hmmpfam hsp output, a program in the \s-1HMMER\s0
package.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::Search::HSP::HmmpfamHSP\->new();
\& Function: Builds a new Bio::Search::HSP::HmmpfamHSP object.
\& Returns : Bio::Search::HSP::HmmpfamHSP
\& Args    : \-chunk  => [Bio::Root::IO, $start, $end] (required if no \-parent)
\&           \-parent => Bio::PullParserI object (required if no \-chunk)
\&           \-hsp_data => array ref with [rank query_start query_end hit_start
\&                                                                                hit_end score evalue]
\&
\&           where the array ref provided to \-chunk contains an IO object
\&           for a filehandle to something representing the raw data of the
\&           hsp, and $start and $end define the tell() position within the
\&           filehandle that the hsp data starts and ends (optional; defaults
\&           to start and end of the entire thing described by the filehandle)
.Ve
.SS "query"
.IX Subsection "query"
.Vb 5
\& Title   : query
\& Usage   : my $query = $hsp\->query
\& Function: Returns a SeqFeature representing the query in the HSP
\& Returns : L<Bio::SeqFeature::Similarity>
\& Args    : none
.Ve
.SS "hit"
.IX Subsection "hit"
.Vb 5
\& Title   : hit
\& Usage   : my $hit = $hsp\->hit
\& Function: Returns a SeqFeature representing the hit in the HSP
\& Returns : L<Bio::SeqFeature::Similarity>
\& Args    : [optional] new value to set
.Ve
.SS "gaps"
.IX Subsection "gaps"
.Vb 8
\& Title    : gaps
\& Usage    : my $gaps = $hsp\->gaps( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\& Function : Get the number of gaps in the query, hit, or total alignment.
\& Returns  : Integer, number of gaps or 0 if none
\& Args     : \*(Aqquery\*(Aq = num conserved / length of query seq (without gaps)
\&            \*(Aqhit\*(Aq   = num conserved / length of hit seq (without gaps)
\&            \*(Aqtotal\*(Aq = num conserved / length of alignment (with gaps)
\&            default = \*(Aqtotal\*(Aq
.Ve
.SS "pvalue"
.IX Subsection "pvalue"
.Vb 5
\& Title   : pvalue
\& Usage   : my $pvalue = $hsp\->pvalue();
\& Function: Returns the P\-value for this HSP
\& Returns : undef (Hmmpfam reports do not have p\-values)
\& Args    : none
.Ve
