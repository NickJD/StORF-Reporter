.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::Hit::HmmpfamHit 3pm"
.TH Bio::Search::Hit::HmmpfamHit 3pm "2018-09-25" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::Hit::HmmpfamHit \- A parser and hit object for hmmpfam hits
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # generally we use Bio::SearchIO to build these objects
\&    use Bio::SearchIO;
\&    my $in = Bio::SearchIO\->new(\-format => \*(Aqhmmer_pull\*(Aq,
\&                                                           \-file   => \*(Aqresult.hmmer\*(Aq);
\&
\&    while (my $result = $in\->next_result) {
\&                while (my $hit = $result\->next_hit) {
\&                        print $hit\->name, "\en";
\&                        print $hit\->score, "\en";
\&                        print $hit\->significance, "\en";
\&
\&                        while (my $hsp = $hit\->next_hsp) {
\&                                # process HSPI objects
\&                        }
\&                }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object implements a parser for hmmpfam hit output, a program in the \s-1HMMER\s0
package.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::Search::Hit::HmmpfamHit\->new();
\& Function: Builds a new Bio::Search::Hit::HmmpfamHit object.
\& Returns : Bio::Search::Hit::HmmpfamHit
\& Args    : \-chunk    => [Bio::Root::IO, $start, $end] (required if no \-parent)
\&           \-parent   => Bio::PullParserI object (required if no \-chunk)
\&           \-hit_data => array ref with [name description score significance
\&                                                num_hsps rank]
\&
\&           where the array ref provided to \-chunk contains an IO object
\&           for a filehandle to something representing the raw data of the
\&           hit, and $start and $end define the tell() position within the
\&           filehandle that the hit data starts and ends (optional; defaults
\&           to start and end of the entire thing described by the filehandle)
.Ve
.SS "next_hsp"
.IX Subsection "next_hsp"
.Vb 6
\& Title    : next_hsp
\& Usage    : while( $hsp = $obj\->next_hsp()) { ... }
\& Function : Returns the next available High Scoring Pair
\& Example  : 
\& Returns  : L<Bio::Search::HSP::HSPI> object or null if finished
\& Args     : none
.Ve
.SS "next_domain"
.IX Subsection "next_domain"
.Vb 5
\& Title   : next_domain 
\& Usage   : my $domain = $hit\->next_domain();
\& Function: An alias for L<next_hsp()>, this will return the next HSP
\& Returns : L<Bio::Search::HSP::HSPI> object
\& Args    : none
.Ve
.SS "hsps"
.IX Subsection "hsps"
.Vb 5
\& Usage     : $hit_object\->hsps();
\& Purpose   : Get a list containing all HSP objects.
\& Example   : @hsps = $hit_object\->hsps();
\& Returns   : list of L<Bio::Search::HSP::BlastHSP> objects.
\& Argument  : none
.Ve
.SS "domains"
.IX Subsection "domains"
.Vb 5
\& Title   : domains
\& Usage   : my @domains = $hit\->domains();
\& Function: An alias for L<hsps()>, this will return the full list of hsps
\& Returns : array of L<Bio::Search::HSP::HSPI> objects
\& Args    : none
.Ve
.SS "hsp"
.IX Subsection "hsp"
.Vb 11
\& Usage     : $hit_object\->hsp( [string] );
\& Purpose   : Get a single HSPI object for the present HitI object.
\& Example   : $hspObj  = $hit_object\->hsp;  # same as \*(Aqbest\*(Aq
\&           : $hspObj  = $hit_object\->hsp(\*(Aqbest\*(Aq);
\&           : $hspObj  = $hit_object\->hsp(\*(Aqworst\*(Aq);
\& Returns   : Object reference for a L<Bio::Search::HSP::HSPI> object.
\& Argument  : String (or no argument).
\&           :   No argument (default) = highest scoring HSP (same as \*(Aqbest\*(Aq).
\&           :   \*(Aqbest\*(Aq  = highest scoring HSP.
\&           :   \*(Aqworst\*(Aq = lowest scoring HSP.
\& Throws    : Exception if an unrecognized argument is used.
.Ve
.PP
See Also   : \fBhsps()\fR, num_hsps()
.SS "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $result\->rewind;
\& Function: Allow one to reset the Hit iterator to the beginning, so that
\&           next_hit() will subsequently return the first hit and so on.
\& Returns : n/a
\& Args    : none
.Ve
.SS "strand"
.IX Subsection "strand"
.Vb 12
\& Usage     : $sbjct\->strand( [seq_type] );
\& Purpose   : Gets the strand(s) for the query, sbjct, or both sequences.
\&           : For hmmpfam, the answers are always 1 (forward strand).
\& Example   : $qstrand = $sbjct\->strand(\*(Aqquery\*(Aq);
\&           : $sstrand = $sbjct\->strand(\*(Aqhit\*(Aq);
\&           : ($qstrand, $sstrand) = $sbjct\->strand();
\& Returns   : scalar context: integer \*(Aq1\*(Aq
\&           : array context without args: list of two strings (1, 1)
\&           : Array context can be "induced" by providing an argument of \*(Aqlist\*(Aq
\&                   : or \*(Aqarray\*(Aq.
\& Argument  : In scalar context: seq_type = \*(Aqquery\*(Aq or \*(Aqhit\*(Aq or \*(Aqsbjct\*(Aq (default
\&           : = \*(Aqquery\*(Aq) (\*(Aqsbjct\*(Aq is synonymous with \*(Aqhit\*(Aq)
.Ve
.SS "frac_aligned_query"
.IX Subsection "frac_aligned_query"
.Vb 7
\& Usage     : $hit_object\->frac_aligned_query();
\& Purpose   : Get the fraction of the query sequence which has been aligned
\&           : across all HSPs (not including intervals between non\-overlapping
\&           : HSPs).
\& Example   : $frac_alnq = $hit_object\->frac_aligned_query();
\& Returns   : undef (the length of query sequences is unknown in Hmmpfam reports)
\& Argument  : none
.Ve
