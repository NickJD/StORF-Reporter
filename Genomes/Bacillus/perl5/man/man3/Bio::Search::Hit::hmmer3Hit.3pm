.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::Hit::hmmer3Hit 3pm"
.TH Bio::Search::Hit::hmmer3Hit 3pm "2018-09-25" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::Hit::hmmer3Hit \- DESCRIPTION of Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Give standard usage here
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Describe the object here
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
bioperl\-l@bioperl.org
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Thomas Sharpton"
.IX Header "AUTHOR - Thomas Sharpton"
Email thomas.sharpton@gmail.com
.PP
Describe contact details here
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Search::Hit::HMMERHit\->new();
\& Function: Builds a new Bio::Search::Hit::HMMERHit object
\& Returns : Bio::Search::Hit::HMMERHit
\& Args    :
\&
\& Plus the Bio::Search::Hit::GenericHit inherited params
\&           \-name         => Name of Hit (required)
\&           \-description  => Description (optional)
\&           \-accession    => Accession number (optional)
\&           \-length       => Length of the Hit (optional)
\&           \-score        => Raw Score for the Hit (optional)
\&           \-significance => Significance value for the Hit (optional)
\&           \-algorithm    => Algorithm used (BLASTP, FASTX, etc...)
\&           \-hsps         => Array ref of HSPs for this Hit.
.Ve
.SS "next_domain"
.IX Subsection "next_domain"
.Vb 5
\& Title   : next_domain
\& Usage   : my $domain = $hit\->next_domain();
\& Function: An alias for L<next_hsp()>, this will return the next HSP
\& Returns : L<Bio::Search::HSP::HSPI> object
\& Args    : none
.Ve
.SS "domains"
.IX Subsection "domains"
.Vb 5
\& Title   : domains
\& Usage   : my @domains = $hit\->domains();
\& Function: An alias for L<hsps()>, this will return the full list of hsps
\& Returns : array of L<Bio::Search::HSP::HSPI> objects
\& Args    : none
.Ve
.SS "bits"
.IX Subsection "bits"
.Vb 5
\& Usage     : $hit_object\->bits();
\& Purpose   : Gets the bit score of the best HSP for the current hit.
\& Example   : $bits = $hit_object\->bits();
\& Returns   : Integer or undef if bit score is not set
\& Argument  : n/a
.Ve
.PP
See Also   : \fBscore()\fR
.SS "iteration"
.IX Subsection "iteration"
.Vb 5
\& Title   : iteration
\& Usage   : $obj\->iteration($newval)
\& Function: PSI\-BLAST iteration
\& Returns : value of iteration
\& Args    : newvalue (optional)
.Ve
