.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::Result::HMMERResult 3pm"
.TH Bio::Search::Result::HMMERResult 3pm "2018-09-25" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::Result::HMMERResult \- A Result object for HMMER results
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Bio::Search::Result::HMMERResult;
\&    my $result = Bio::Search::Result::HMMERResult\->new
\&    ( \-hmm_name => \*(Aqpfam\*(Aq,
\&      \-sequence_file => \*(Aqroa1.pep\*(Aq,
\&      \-hits => \e@hits);
\&
\&    # generally we use Bio::SearchIO to build these objects
\&    use Bio::SearchIO;
\&    my $in = Bio::SearchIO\->new(\-format => \*(Aqhmmer\*(Aq,
\&                               \-file   => \*(Aqresult.hmmer\*(Aq);
\&    while( my $result = $in\->next_result ) {
\&        print $result\->query_name, " ", $result\->algorithm, " ", $result\->num_hits(), " hits\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a specialization of Bio::Search::Result::GenericResult.
There are a few extra methods, specifically sequence_file,
hmm_name, next_models, and models.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : my $obj = Bio::Search::Result::HMMERResult\->new();
\& Function: Builds a new Bio::Search::Result::HMMERResult object
\& Returns : Bio::Search::Result::HMMERResult
\& Args    : \-hmm_name => string, name of hmm file
\&           \-sequence_file => name of the sequence file
.Ve
.PP
plus Bio::Search::Result::GenericResult parameters
.PP
.Vb 12
\&           \-query_name        => Name of query Sequence
\&           \-query_accession   => Query accession number (if available)
\&           \-query_description => Description of query sequence
\&           \-query_length      => Length of query sequence
\&           \-database_name     => Name of database
\&           \-database_letters  => Number of residues in database
\&           \-database_entries  => Number of entries in database
\&           \-parameters        => hash ref of search parameters (key => value)
\&           \-statistics        => hash ref of search statistics (key => value)
\&           \-algorithm         => program name (blastx)
\&           \-algorithm_version => version of the algorithm (2.1.2)
\&           \-program_reference => literature reference string for this algorithm
.Ve
.SS "hmm_name"
.IX Subsection "hmm_name"
.Vb 5
\& Title   : hmm_name
\& Usage   : $obj\->hmm_name($newval)
\& Function: Get/Set the value of hmm_name
\& Returns : value of hmm_name
\& Args    : newvalue (optional)
.Ve
.SS "sequence_file"
.IX Subsection "sequence_file"
.Vb 5
\& Title   : sequence_file
\& Usage   : $obj\->sequence_file($newval)
\& Function: Get/Set the value of sequence_file
\& Returns : value of sequence_file
\& Args    : newvalue (optional)
.Ve
.SS "next_model"
.IX Subsection "next_model"
.Vb 6
\& Title   : next_model
\& Usage   : my $domain = $result\->next_model
\& Function: Returns the next domain \- this
\&           is an alias for next_hit
\& Returns : L<Bio::Search::Hit::HitI> object
\& Args    : none
.Ve
.SS "models"
.IX Subsection "models"
.Vb 6
\& Title   : models
\& Usage   : my @domains = $result\->models;
\& Function: Returns the list of HMM models seen \- this
\&           is an alias for hits()
\& Returns : Array of L<Bio::Search::Hit::HitI> objects
\& Args    : none
.Ve
.SS "Bio::Search::Result::GenericResult inherited methods"
.IX Subsection "Bio::Search::Result::GenericResult inherited methods"
.SS "algorithm"
.IX Subsection "algorithm"
.Vb 5
\& Title   : algorithm
\& Usage   : my $r_type = $hsp\->algorithm
\& Function: Obtain the name of the algorithm used to obtain the Result
\& Returns : string (e.g., BLASTP)
\& Args    : [optional] scalar string to set value
.Ve
.SS "algorithm_version"
.IX Subsection "algorithm_version"
.Vb 5
\& Title   : algorithm_version
\& Usage   : my $r_version = $hsp\->algorithm_version
\& Function: Obtain the version of the algorithm used to obtain the Result
\& Returns : string (e.g., 2.1.2)
\& Args    : [optional] scalar string to set algorithm version value
.Ve
.SS "Bio::Search::Result::ResultI interface methods"
.IX Subsection "Bio::Search::Result::ResultI interface methods"
Bio::Search::Result::ResultI implementation
.SS "next_hit"
.IX Subsection "next_hit"
.Vb 6
\& Title   : next_hit
\& Usage   : while( $hit = $result\->next_hit()) { ... }
\& Function: Returns the next available Hit object, representing potential
\&           matches between the query and various entities from the database.
\& Returns : a Bio::Search::Hit::HitI object or undef if there are no more.
\& Args    : none
.Ve
.SS "query_name"
.IX Subsection "query_name"
.Vb 6
\& Title   : query_name
\& Usage   : $id = $result\->query_name();
\& Function: Get the string identifier of the query used by the
\&           algorithm that performed the search.
\& Returns : a string.
\& Args    : [optional] new string value for query name
.Ve
.SS "query_accession"
.IX Subsection "query_accession"
.Vb 5
\& Title   : query_accession
\& Usage   : $id = $result\->query_accession();
\& Function: Get the accession (if available) for the query sequence
\& Returns : a string
\& Args    : [optional] new string value for accession
.Ve
.SS "query_length"
.IX Subsection "query_length"
.Vb 6
\& Title   : query_length
\& Usage   : $id = $result\->query_length();
\& Function: Get the length of the query sequence
\&           used in the search.
\& Returns : a number
\& Args    :  [optional] new integer value for query length
.Ve
.SS "query_description"
.IX Subsection "query_description"
.Vb 6
\& Title   : query_description
\& Usage   : $id = $result\->query_description();
\& Function: Get the description of the query sequence
\&           used in the search.
\& Returns : a string
\& Args    : [optional] new string for the query description
.Ve
.SS "database_name"
.IX Subsection "database_name"
.Vb 6
\& Title   : database_name
\& Usage   : $name = $result\->database_name()
\& Function: Used to obtain the name of the database that the query was searched
\&           against by the algorithm.
\& Returns : a scalar string
\& Args    : [optional] new string for the db name
.Ve
.SS "database_letters"
.IX Subsection "database_letters"
.Vb 7
\& Title   : database_letters
\& Usage   : $size = $result\->database_letters()
\& Function: Used to obtain the size of database that was searched against.
\& Returns : a scalar integer (units specific to algorithm, but probably the
\&           total number of residues in the database, if available) or undef if
\&           the information was not available to the Processor object.
\& Args    : [optional] new scalar integer for number of letters in db
.Ve
.SS "database_entries"
.IX Subsection "database_entries"
.Vb 6
\& Title   : database_entries
\& Usage   : $num_entries = $result\->database_entries()
\& Function: Used to obtain the number of entries contained in the database.
\& Returns : a scalar integer representing the number of entities in the database
\&           or undef if the information was not available.
\& Args    : [optional] new integer for the number of sequence entries in the db
.Ve
.SS "get_parameter"
.IX Subsection "get_parameter"
.Vb 6
\& Title   : get_parameter
\& Usage   : my $gap_ext = $report\->get_parameter(\*(Aqgapext\*(Aq)
\& Function: Returns the value for a specific parameter used
\&           when running this report
\& Returns : string
\& Args    : name of parameter (string)
.Ve
.SS "available_parameters"
.IX Subsection "available_parameters"
.Vb 5
\& Title   : available_parameters
\& Usage   : my @params = $report\->available_paramters
\& Function: Returns the names of the available parameters
\& Returns : Return list of available parameters used for this report
\& Args    : none
.Ve
.SS "get_statistic"
.IX Subsection "get_statistic"
.Vb 6
\& Title   : get_statistic
\& Usage   : my $gap_ext = $report\->get_statistic(\*(Aqkappa\*(Aq)
\& Function: Returns the value for a specific statistic available
\&           from this report
\& Returns : string
\& Args    : name of statistic (string)
.Ve
.SS "available_statistics"
.IX Subsection "available_statistics"
.Vb 5
\& Title   : available_statistics
\& Usage   : my @statnames = $report\->available_statistics
\& Function: Returns the names of the available statistics
\& Returns : Return list of available statistics used for this report
\& Args    : none
.Ve
.SS "Bio::Search::Result::GenericResult specific methods"
.IX Subsection "Bio::Search::Result::GenericResult specific methods"
.SS "add_hit"
.IX Subsection "add_hit"
.Vb 5
\& Title   : add_hit
\& Usage   : $report\->add_hit($hit)
\& Function: Adds a HitI to the stored list of hits
\& Returns : Number of HitI currently stored
\& Args    : Bio::Search::Hit::HitI
.Ve
.SS "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $result\->rewind;
\& Function: Allow one to reset the Hit iteration to the beginning
\&           Since this is an in\-memory implementation
\& Returns : none
\& Args    : none
.Ve
.SS "add_parameter"
.IX Subsection "add_parameter"
.Vb 6
\& Title   : add_parameter
\& Usage   : $report\->add_parameter(\*(Aqgapext\*(Aq, 11);
\& Function: Adds a parameter
\& Returns : none
\& Args    : key  \- key value name for this parama
\&           value \- value for this parameter
.Ve
.SS "add_statistic"
.IX Subsection "add_statistic"
.Vb 6
\& Title   : add_statistic
\& Usage   : $report\->add_statistic(\*(Aqlambda\*(Aq, 2.3);
\& Function: Adds a parameter
\& Returns : none
\& Args    : key  \- key value name for this parama
\&           value \- value for this parameter
.Ve
.SS "num_hits"
.IX Subsection "num_hits"
.Vb 5
\& Title   : num_hits
\& Usage   : my $hitcount= $result\->num_hits
\& Function: returns the number of hits for this query result
\& Returns : integer
\& Args    : none
.Ve
.SS "hits"
.IX Subsection "hits"
.Vb 5
\& Title   : hits
\& Usage   : my @hits = $result\->hits
\& Function: Returns the available hits for this Result
\& Returns : Array of L<Bio::Search::Hit::HitI> objects
\& Args    : none
.Ve
.SS "program_reference"
.IX Subsection "program_reference"
.Vb 5
\& Title   : program_reference
\& Usage   : $obj\->program_reference($newval)
\& Function:
\& Returns : value of the literature reference for the algorithm
\& Args    : newvalue (optional)
.Ve
