.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::HMMER::Results 3pm"
.TH Bio::Tools::HMMER::Results 3pm "2018-09-25" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::HMMER::Results \- Object representing HMMER output results
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   # parse a hmmsearch file (can also parse a hmmpfam file)
\&   $res = Bio::Tools::HMMER::Results\->new( \-file => \*(Aqoutput.hmm\*(Aq ,
\&                                          \-type => \*(Aqhmmsearch\*(Aq);
\&
\&   # print out the results for each sequence
\&   foreach $seq ( $res\->each_Set ) {
\&       print "Sequence bit score is",$seq\->bits,"\en";
\&       foreach $domain ( $seq\->each_Domain ) {
\&           print " Domain start ",$domain\->start," end ",$domain\->end,
\&           " score ",$domain\->bits,"\en";
\&       }
\&   }
\&
\&   # new result object on a sequence/domain cutoff of
\&   # 25 bits sequence, 15 bits domain
\&   $newresult = $res\->filter_on_cutoff(25,15);
\&
\&   # alternative way of getting out all domains directly
\&   foreach $domain ( $res\->each_Domain ) {
\&       print "Domain on ",$domain\->seq_id," with score ",
\&       $domain\->bits," evalue ",$domain\->evalue,"\en";
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents \s-1HMMER\s0 output, either from hmmsearch or
hmmpfam. For hmmsearch, a series of HMMER::Set objects are made, one
for each sequence, which have the the bits score for the object. For
hmmpfam searches, only one Set object is made.
.PP
These objects come from the original HMMResults modules used
internally in Pfam, written by Ewan Birney. Ewan then converted them to
BioPerl objects in 1999. That conversion is meant to be backwardly
compatible, but may not be (caveat emptor).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 8
\& Title   : next_feature
\& Usage   : while( my $feat = $res\->next_feature ) { # do something }
\& Function: SeqAnalysisParserI implementing function
\& Example :
\& Returns : A Bio::SeqFeatureI compliant object, in this case,
\&           each DomainUnit object, ie, flattening the Sequence
\&           aspect of this.
\& Args    : None
.Ve
.SS "number"
.IX Subsection "number"
.Vb 3
\& Title   : number
\& Usage   : print "There are ",$res\->number," domains hit\en";
\& Function: provides the number of domains in the HMMER report
.Ve
.SS "seqfile"
.IX Subsection "seqfile"
.Vb 6
\& Title   : seqfile
\& Usage   : $obj\->seqfile($newval)
\& Function:
\& Example :
\& Returns : value of seqfile
\& Args    : newvalue (optional)
.Ve
.SS "hmmfile"
.IX Subsection "hmmfile"
.Vb 6
\& Title   : hmmfile
\& Usage   : $obj\->hmmfile($newval)
\& Function:
\& Example :
\& Returns : value of hmmfile
\& Args    : newvalue (optional)
.Ve
.SS "add_Domain"
.IX Subsection "add_Domain"
.Vb 4
\& Title   : add_Domain
\& Usage   : $res\->add_Domain($unit)
\& Function: adds a domain to the results array. Mainly used internally.
\& Args    : A Bio::Tools::HMMER::Domain
.Ve
.SS "each_Domain"
.IX Subsection "each_Domain"
.Vb 5
\& Title   : each_Domain
\& Usage   : foreach $domain ( $res\->each_Domain() )
\& Function: array of Domain units which are held in this report
\& Returns : array
\& Args    : none
.Ve
.SS "domain_bits_cutoff_from_evalue"
.IX Subsection "domain_bits_cutoff_from_evalue"
.Vb 7
\& Title   : domain_bits_cutoff_from_evalue
\& Usage   : $cutoff = domain_bits_cutoff_from_evalue(0.01);
\& Function: return a bits cutoff from an evalue using the
\&           scores here. Somewhat interesting logic:
\&            Find the two bit score which straddle the evalue
\&            if( 25 is between these two points) return 25
\&            else return the midpoint.
\&
\&           This logic tries to ensure that with large signal to
\&           noise separation one still has sensible 25 bit cutoff
\& Returns :
\& Args    :
.Ve
.SS "write_FT_output"
.IX Subsection "write_FT_output"
.Vb 5
\& Title   : write_FT_output
\& Usage   : $res\->write_FT_output(\e*STDOUT,\*(AqDOMAIN\*(Aq)
\& Function: writes feature table output ala swissprot
\& Returns :
\& Args    :
.Ve
.SS "filter_on_cutoff"
.IX Subsection "filter_on_cutoff"
.Vb 7
\& Title   : filter_on_cutoff
\& Usage   : $newresults = $results\->filter_on_cutoff(25,15);
\& Function: Produces a new HMMER::Results module which has
\&           been trimmed at the cutoff.
\& Returns : a Bio::Tools::HMMER::Results module
\& Args    : sequence cutoff and domain cutoff. in bits score
\&           if you want one cutoff, simply use same number both places
.Ve
.SS "write_ascii_out"
.IX Subsection "write_ascii_out"
.Vb 6
\& Title   : write_ascii_out
\& Usage   : $res\->write_ascii_out(\e*STDOUT)
\& Function: writes as
\&           seq seq_start seq_end model\-acc model_start model_end model_name
\& Returns :
\& Args    :
\&
\&  FIXME: Now that we have no modelacc, this is probably a bad thing.
.Ve
.SS "write_GDF_bits"
.IX Subsection "write_GDF_bits"
.Vb 5
\& Title   : write_GDF_bits
\& Usage   : $res\->write_GDF_bits(25,15,\e*STDOUT)
\& Function: writes GDF format with a sequence,domain threshold
\& Returns :
\& Args    :
.Ve
.SS "add_Set"
.IX Subsection "add_Set"
.Vb 5
\& Title   : add_Set
\& Usage   : Mainly internal function
\& Function:
\& Returns :
\& Args    :
.Ve
.SS "each_Set"
.IX Subsection "each_Set"
.Vb 5
\& Title   : each_Set
\& Usage   :
\& Function:
\& Returns :
\& Args    :
.Ve
.SS "get_Set"
.IX Subsection "get_Set"
.Vb 5
\& Title   : get_Set
\& Usage   : $set = $res\->get_Set(\*(Aqsequence\-name\*(Aq);
\& Function: returns the Set for a particular sequence
\& Returns : a HMMER::Set object
\& Args    : name of the sequence
.Ve
.SS "_parse_hmmpfam"
.IX Subsection "_parse_hmmpfam"
.Vb 5
\& Title   : _parse_hmmpfam
\& Usage   : $res\->_parse_hmmpfam($filehandle)
\& Function:
\& Returns :
\& Args    :
.Ve
.SS "_parse_hmmsearch"
.IX Subsection "_parse_hmmsearch"
.Vb 5
\& Title   : _parse_hmmsearch
\& Usage   : $res\->_parse_hmmsearch($filehandle)
\& Function:
\& Returns :
\& Args    :
.Ve
.SS "parsetype"
.IX Subsection "parsetype"
.Vb 5
\& Title   : parsetype
\& Usage   : $obj\->parsetype($newval)
\& Function:
\& Returns : value of parsetype
\& Args    : newvalue (optional)
.Ve
